# This file was *autogenerated* from the file doc.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1000000 = Integer(1000000); _sage_const_5 = Integer(5); _sage_const_255255256 = Integer(255255256); _sage_const_255255255 = Integer(255255255); _sage_const_1000 = Integer(1000); _sage_const_21 = Integer(21)
import cv2
import numpy
from matplotlib import image
img=cv2.imread('/home/amarjeet/projects/python/pictures/triangle.png')
img1=img
img=cv2.blur(img,(_sage_const_21 ,_sage_const_21 ))
img=img.astype('int')
a=(img[:,:,_sage_const_0 ]+_sage_const_1000 *img[:,:,_sage_const_1 ]+_sage_const_1000000 *img[:,:,_sage_const_2 ])
a=a.astype('int')
x,y=a.shape
color=[]
tr = _sage_const_0 
count=_sage_const_0 
for r in range(x) :
	for b in range(y):
		color.append(a[r][b])
color.sort()
no=_sage_const_0 
no_colors=[]
value_colors=[]
b=_sage_const_0 
c=_sage_const_0 
for r in color:
	if(tr!=r):
		count=count+_sage_const_1 
		value_colors.append(tr)
		no_colors.append(b)
		tr=r
		b=_sage_const_0 
	b=b+_sage_const_1 
no_colors.append(b)
value_colors.append(tr)
print(value_colors,no_colors)
print(len(value_colors))
first=_sage_const_0 
second=_sage_const_0 
max=[]
b=-_sage_const_1 
min=[]
c=_sage_const_5 
for third in no_colors:
	if(second>=first and second>third and c!=_sage_const_1 ):
		max.append(value_colors[b])
		c=_sage_const_1 
	if(second<=first and second<third and c!=_sage_const_0 ):
		min.append(value_colors[b])
		c=_sage_const_0 
	first=second
	second=third
	b=b+_sage_const_1 
if(second>first):
	max.append(value_colors[b])
else:
	max.append(value_colors[b])
print(len(min),len(max))
x,y=a.shape
img=img.astype('uint8')
print(len(min),len(max))
min.append(_sage_const_255255256 )
max.append(_sage_const_255255255 )
max=set(max)
max=list(max)
max.sort()
min=set(min)
min=list(min)
min.sort()
print(min,max)
for xx in range(x):
	for yy in range(y):
		for b in min:
			if(a[xx][yy]<b):
				img[xx][yy][_sage_const_1 ]=int(max[min.index(b)-_sage_const_1 ]/_sage_const_1000 )%_sage_const_1000 
				img[xx][yy][_sage_const_2 ]=max[min.index(b)-_sage_const_1 ]/_sage_const_1000000 
				img[xx][yy][_sage_const_0 ]=max[min.index(b)-_sage_const_1 ]%_sage_const_1000 
				break

img=img.astype('uint8')
print(img)
cv2.imshow('sreddd.png',img)
cv2.imshow('sred.png',img1)
cv2.waitKey(_sage_const_0 )



